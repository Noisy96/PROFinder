{"version":3,"sources":["res/icons/male-icon.png","res/icons/female-icon.png","res/images/logo.png","res/icons/code-source-icon.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","sortData","data","state","inputValue","profilesDetails","handleChange","bind","sort","a","b","nameA","fullname","toUpperCase","nameB","event","this","setState","target","value","filter","profileObj","toLowerCase","includes","className","HeaderBox","function","ProfilesRowsBoard","profiles","FooterBox","React","Component","src","logo","alt","SearchBar","onChange","placeholder","map","key","toString","profile","PopupMessage","ProfileRow","icon","gender","maleIcon","femaleIcon","copied","index","copyToClipboard","switchMail","copy","emails","email","myInterval","setInterval","orientation","length","newIndex","id","degree","grade","onClick","href","rel","sourceCodeIcon","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5a09270f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/male-icon.1950e10d.png\";","module.exports = __webpack_public_path__ + \"static/media/female-icon.ca2d694e.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.1896eea0.png\";","module.exports = __webpack_public_path__ + \"static/media/code-source-icon.742f9582.png\";","import React from 'react';\n\nimport './styles/desktop.css';\nimport './styles/mobile.css';\n\nimport copy from 'copy-to-clipboard';\nimport data from './data/profilesData.json';\nimport maleIcon from './res/icons/male-icon.png';\nimport femaleIcon from './res/icons/female-icon.png';\nimport logo from './res/images/logo.png';\nimport sourceCodeIcon from './res/icons/code-source-icon.png';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.sortData(data);\n    this.state = {\n      inputValue: '',\n      profilesDetails: data\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.sortData = this.sortData.bind(this);\n  }\n\n  // called at the first data loading to display data in an ordered way\n  sortData(data) {\n    data.sort(function(a,b) {\n      var nameA = a.fullname.toUpperCase();\n      var nameB = b.fullname.toUpperCase(); \n      if (nameA < nameB) {\n        return -1;\n      }\n      if (nameA > nameB) {\n        return 1;\n      }\n      return 0;\n    });\n  }\n\n  // called everytime the search input element value is changed\n  handleChange(event) {\n    this.setState({\n      inputValue: event.target.value,\n      profilesDetails: data.filter((profileObj) => {\n        return profileObj.fullname.toLowerCase().includes(event.target.value.toLowerCase());\n      })\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <HeaderBox data={{value: this.state.inputValue, function: this.handleChange}} />\n        <ProfilesRowsBoard profiles={this.state.profilesDetails} />\n        <FooterBox />\n      </div>\n    );\n  }\n}\n\n\nfunction HeaderBox(props) {\n  return (\n    <div className=\"header-box\">\n      <img className=\"logo\" src={logo} alt=\"logo\" />\n      <SearchBar data={props.data} />\n    </div>\n  )\n}\n\nfunction SearchBar(props) {\n  return (\n    <div className=\"search-bar\">\n      <input value={props.data.value} onChange={props.data.function} placeholder=\"Search by name\" />\n      <div className=\"search-icon\">\n        <i className=\"fa fa-search fa4x\"></i>\n      </div>\n    </div>\n  )\n}\n\nfunction ProfilesRowsBoard(props) {\n  const profiles = props.profiles;\n  const filteredProfiles = profiles.map((profileObj) => {\n    return <ProfileRow key={profileObj.fullname.toString()} profile={profileObj} />\n  });\n  return filteredProfiles;\n}\n\nfunction PopupMessage() {\n  return (\n    <div className=\"popup-message\">\n      <div className=\"popup-rectangle\">\n        <p>Copied!</p>\n      </div>\n      <div className=\"arrow-down\"></div>\n    </div>\n    );\n}\n\nclass ProfileRow extends React.Component {\n\n  icon = (this.props.profile.gender === 'M') ? maleIcon : femaleIcon;\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      copied: false,\n      index: 0,\n    };\n    this.copyToClipboard = this.copyToClipboard.bind(this);\n    this.switchMail = this.switchMail.bind(this);\n  };\n\n  // copies the email to the user's clipboard & displays a feedback bubble\n  copyToClipboard() {\n    copy(this.props.profile.emails[this.state.index].email);\n    this.setState({\n      copied: true,\n      index: this.state.index\n    });\n    this.myInterval = setInterval(() => {\n      this.setState({\n        copied: false,\n        index: this.state.index\n      });\n    }, 3000);\n  };\n\n  switchMail(orientation) {\n    let length = this.props.profile.emails.length;\n    let index = this.state.index;\n\n    // Might look complexe but this just increases/decreases index value without allowing it\n    // become greater than the actual number of emails available nor get bellow 0\n    // TODO : Refactor : this can be done more elegantly...probably\n    let newIndex = orientation === \"down\" ? (index - 1) < 0 ? 0 : (index - 1) : (index + 1) >= length ? length - 1 : index + 1;\n\n    if(index !== newIndex) {\n      this.setState({ \n        copied: false,\n        index: newIndex\n      });\n    }\n  };\n\n\n  // TODO : This probably needs a proper refactoring\n  // TODO : Add visual feedback : either right or left button has to be visibily disabled when index is at one boundary\n  render () {\n    return (\n      <div className=\"profile-row-box\">\n        <img alt=\"avatar icon\" className=\"avatar-icon\" src={this.icon}/>\n        <div className=\"vertical-divider\"></div>\n        <p className=\"main-profile-details\" id=\"profile-fullname\">{this.props.profile.fullname}</p>\n        <div className=\"vertical-divider\"></div>\n        <p className=\"secondary-profile-details\" id=\"profile-degree\">{this.props.profile.degree}</p>\n        <div className=\"vertical-divider\"></div>\n        <p className=\"secondary-profile-details\" id=\"profile-grade\">{this.props.profile.grade}</p>\n        <div className=\"vertical-divider\"></div>\n        {this.state.copied ? <PopupMessage /> : <div></div>}\n        <p className=\"main-profile-details\" id=\"profile-email\">{this.props.profile.emails[this.state.index].email}</p>\n\n        { this.props.profile.emails.length>1\n        ?\n        <div className=\"switch-button-box\">\n          <button className=\"switch-button fa fa-caret-left\" onClick={() => this.switchMail(\"down\")}></button>\n          <button className=\"switch-button fa fa-caret-right\" onClick={() => this.switchMail(\"up\")}></button>\n        </div>\n        :\n        <div></div>\n        }\n        <button className=\"copy-button\" onClick={this.copyToClipboard}>Copy email</button>\n      </div>\n    )\n  }\n}\n\nfunction FooterBox() {\n  return (\n    <div className=\"footer-box\">\n      <a href=\"https://github.com/Noisy96/PROFinder\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <img src={sourceCodeIcon} alt=\"Source code link\" />\n      </a>\n    </div>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'font-awesome/css/font-awesome.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}